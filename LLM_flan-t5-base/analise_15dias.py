# analise_15dias.py

# An√°lise de Ader√™ncia das Previs√µes de Comiss√£o

"""
Este script compara as previs√µes de comiss√£o geradas anteriormente (pelo script 'previsao_comissao.py')
com os dados reais atualizados dos primeiros 15 dias do m√™s.

Etapas:
1. Carregar as previs√µes dos 30 dias do m√™s anterior.
2. Carregar a base de dados hist√≥rica atualizada com os novos 15 dias.
3. Alinhar e comparar previs√µes vs. real para o per√≠odo dos 15 dias.
4. Calcular m√©tricas de ader√™ncia (MAE, MAPE).
5. Gerar interpreta√ß√µes com LLM sobre a performance da previs√£o.
6. Adicionar nova aba ao arquivo Excel existente com a an√°lise.

Requisitos:
- pip install pandas scikit-learn openpyxl transformers torch
"""

# === CONFIGURA√á√ÉO INICIAL =====================================================
INPUT_DIR_DADOS_ATUALIZADOS = r'INSIRA_AQUI_O_CAMINHO_DOS_DADOS_ATUALIZADOS'
OUTPUT_DIR_PREVISAO = r'INSIRA_AQUI_O_CAMINHO_DO_DIRETORIO_DE_SAIDA'
NOME_ARQUIVO_PREVISAO = "previsao_30dias.xlsx"
MODEL_NAME = "google/flan-t5-base" # Modelo LLM para explica√ß√µes

# =============================================================================
import os
import sys
import time
import getpass
import platform
import warnings
from glob import glob
from datetime import datetime, timedelta
import argparse

import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score, root_mean_squared_error
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
import torch
from openpyxl import load_workbook

warnings.filterwarnings("ignore", category=UserWarning)

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument("-i", "--input_atualizado", dest="cli_input_atualizado")
parser.add_argument("-o", "--output_previsao", dest="cli_output_previsao")
args, _ = parser.parse_known_args()

if args.cli_input_atualizado:
    INPUT_DIR_DADOS_ATUALIZADOS = args.cli_input_atualizado
if args.cli_output_previsao:
    OUTPUT_DIR_PREVISAO = args.cli_output_previsao

# Caminho completo para o arquivo de previs√£o gerado anteriormente
caminho_excel_previsao = os.path.join(OUTPUT_DIR_PREVISAO, NOME_ARQUIVO_PREVISAO)

if not os.path.isdir(INPUT_DIR_DADOS_ATUALIZADOS):
    raise FileNotFoundError(f"Pasta de entrada de dados atualizados n√£o encontrada: {INPUT_DIR_DADOS_ATUALIZADOS}")
if not os.path.isfile(caminho_excel_previsao):
    raise FileNotFoundError(f"Arquivo de previs√£o n√£o encontrado: {caminho_excel_previsao}. Execute 'previsao_comissao.py' primeiro.")

print("\nüßë Usu√°rio:", getpass.getuser())
print("üíª M√°quina:", platform.node())
print("üêç Python :", sys.version.split()[0])
print("üóïÔ∏è In√≠cio  :", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
print("\nInput Dados Atualizados:", INPUT_DIR_DADOS_ATUALIZADOS)
print("Output Previs√£o        :", OUTPUT_DIR_PREVISAO)
print("Arquivo de Previs√£o    :", NOME_ARQUIVO_PREVISAO)
print("="*60, "\n")

# === Carregar LLM para Gera√ß√£o de Explica√ß√µes ================================
print(f"üß† Carregando LLM ({MODEL_NAME}) para gera√ß√£o de explica√ß√µes...")
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
model_llm = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME)
if torch.cuda.is_available():
    model_llm.to('cuda')
    print("   ‚Ä¢ LLM carregada para GPU.")
else:
    print("   ‚Ä¢ LLM carregada para CPU.")

def generate_llm_explanation(prompt_text):
    inputs = tokenizer(prompt_text, return_tensors="pt", max_length=512, truncation=True)
    if torch.cuda.is_available():
        inputs = {k: v.to('cuda') for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model_llm.generate(
            **inputs,
            max_new_tokens=150, # Aumentei um pouco para explica√ß√µes mais completas
            num_beams=5,
            early_stopping=True
        )
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# === 1. Carregar Previs√µes e Dados Reais Atualizados =========================
print("üîç Carregando previs√µes anteriores‚Ä¶")
try:
    df_previsoes_anteriores = pd.read_excel(caminho_excel_previsao, sheet_name="Previsao_30_Dias")
    df_previsoes_anteriores["Data"] = pd.to_datetime(df_previsoes_anteriores["Data"])
    # Convertendo 'Previs√£o Comiss√£o' de volta para float para c√°lculos
    df_previsoes_anteriores["Previs√£o Comiss√£o"] = df_previsoes_anteriores["Previs√£o Comiss√£o"]\
        .str.replace(r"R\$", "", regex=True)\
        .str.replace(".", "", regex=False)\
        .str.replace(",", ".", regex=False)\
        .astype(float)
    print(f"‚úÖ Previs√µes anteriores carregadas. {len(df_previsoes_anteriores)} registros.")
except Exception as e:
    raise FileNotFoundError(f"Erro ao carregar ou processar a aba 'Previsao_30_Dias' do arquivo {caminho_excel_previsao}: {e}")


print("üîç Varredura de dados hist√≥ricos atualizados‚Ä¶")
arquivos_xlsx_atualizados = glob(os.path.join(INPUT_DIR_DADOS_ATUALIZADOS, "*.xlsx"))
if not arquivos_xlsx_atualizados:
    raise FileNotFoundError("Nenhum .xlsx encontrado na pasta de entrada de dados atualizados.")

lista_df_atualizados = [pd.read_excel(arq) for arq in arquivos_xlsx_atualizados]
df_real_atualizado = pd.concat(lista_df_atualizados, ignore_index=True)

# Validar e pr√©-processar dados atualizados
colunas_obrigatorias = ["Data de Emiss√£o", "Valor Comiss√£o", "Seguradora", "Produto"]
if not all(col in df_real_atualizado.columns for col in colunas_obrigatorias):
    raise ValueError(f"As colunas {colunas_obrigatorias} s√£o obrigat√≥rias nos dados atualizados.")

df_real_atualizado["Data de Emiss√£o"] = pd.to_datetime(df_real_atualizado["Data de Emiss√£o"])
df_real_atualizado["Seguradora"] = df_real_atualizado["Seguradora"].astype(str)
df_real_atualizado["Produto"] = df_real_atualizado["Produto"].astype(str)
df_real_atualizado["Valor Comiss√£o"] = pd.to_numeric(df_real_atualizado["Valor Comiss√£o"], errors='coerce')
df_real_atualizado.dropna(subset=["Valor Comiss√£o"], inplace=True)

print(f"‚úÖ Dados reais atualizados carregados. Total de {len(df_real_atualizado)} registros.")

# === 2. Alinhar e Comparar Previs√µes vs. Real (Primeiros 15 Dias) ============
print("\nüîÑ Realizando compara√ß√£o dos primeiros 15 dias‚Ä¶")

# Determinar o per√≠odo dos 15 dias do m√™s corrente
# A data de execu√ß√£o do script (hoje) √© usada como refer√™ncia para os "15 dias"
data_hoje = datetime.now().date()
data_inicio_mes_atual = data_hoje.replace(day=1)
data_fim_comparacao = data_hoje # Assumimos que 'hoje' √© o 15¬∫ dia ou o dia em que se roda a an√°lise

# Filtrar dados reais para o per√≠odo
df_reais_periodo = df_real_atualizado[
    (df_real_atualizado["Data de Emiss√£o"].dt.date >= data_inicio_mes_atual) &
    (df_real_atualizado["Data de Emiss√£o"].dt.date <= data_fim_comparacao)
].groupby(["Seguradora", "Produto", df_real_atualizado["Data de Emiss√£o"].dt.date.rename("Data_Real")])["Valor Comiss√£o"].sum().reset_index()

# Filtrar previs√µes para o mesmo per√≠odo
df_prev_periodo = df_previsoes_anteriores[
    (df_previsoes_anteriores["Data"] >= data_inicio_mes_atual) &
    (df_previsoes_anteriores["Data"] <= data_fim_comparacao)
]

# Unir os DataFrames para compara√ß√£o
df_comparacao = pd.merge(
    df_reais_periodo,
    df_prev_periodo,
    left_on=["Seguradora", "Produto", "Data_Real"],
    right_on=["Seguradora", "Produto", "Data"],
    how="inner" # Apenas seguradoras/produtos/datas que t√™m dados nos dois
)

if df_comparacao.empty:
    print("‚ö†Ô∏è Nenhuma data coincidente encontrada para compara√ß√£o nos primeiros 15 dias. Verifique os dados e o per√≠odo.")
    df_analise_15dias = pd.DataFrame(columns=["Seguradora", "Produto", "MAE (15 dias)", "MAPE (15 dias)", "Total Real (R$)", "Total Previsto (R$)", "Interpreta√ß√£o da LLM", "Status"])
else:
    # Calcular m√©tricas de erro para o per√≠odo de compara√ß√£o
    df_comparacao["Erro Absoluto"] = abs(df_comparacao["Valor Comiss√£o"] - df_comparacao["Previs√£o Comiss√£o"])
    # MAPE: Mean Absolute Percentage Error (evitar divis√£o por zero)
    df_comparacao["Erro Percentual"] = np.where(
        df_comparacao["Valor Comiss√£o"] != 0,
        (df_comparacao["Erro Absoluto"] / df_comparacao["Valor Comiss√£o"]) * 100,
        0 # Se o valor real for 0, o erro percentual √© 0 se a previs√£o tamb√©m for 0, ou alto se n√£o for.
          # Para simplificar, estamos tratando como 0 aqui. Uma abordagem mais robusta seria log(x+1).
    )

    analise_15dias_resultados = []
    for (seg, prod), grupo_comp in df_comparacao.groupby(["Seguradora", "Produto"]):
        mae_15dias = grupo_comp["Erro Absoluto"].mean()
        mape_15dias = grupo_comp["Erro Percentual"].mean()
        total_real = grupo_comp["Valor Comiss√£o"].sum()
        total_previsto = grupo_comp["Previs√£o Comiss√£o"].sum()

        # Determinar status baseado no MAPE (exemplo de regra)
        if mape_15dias < 10:
            status = "Excelente"
        elif mape_15dias < 20:
            status = "Bom"
        elif mape_15dias < 35:
            status = "Moderado, requer aten√ß√£o"
        else:
            status = "Previs√£o distante, requer investiga√ß√£o"

        # Gerar interpreta√ß√£o com LLM
        prompt_llm_15dias = (
            f"An√°lise de Desempenho da Previs√£o para os primeiros dias do m√™s atual:\n"
            f"Seguradora: {seg}, Produto: {prod}\n"
            f"Valor Real Total (per√≠odo): R${total_real:,.2f}\n"
            f"Valor Previsto Total (per√≠odo): R${total_previsto:,.2f}\n"
            f"Erro Absoluto M√©dio (MAE): R${mae_15dias:,.2f}\n"
            f"Erro Percentual Absoluto M√©dio (MAPE): {mape_15dias:.2f}%\n\n"
            f"Com base nessas m√©tricas, forne√ßa uma an√°lise concisa sobre a ader√™ncia da previs√£o aos dados reais para este per√≠odo."
            f"Indique se a previs√£o foi satisfat√≥ria ou se h√° desvios significativos e poss√≠veis raz√µes."
        )
        interpreta√ß√£o_llm_15dias = generate_llm_explanation(prompt_llm_15dias)

        analise_15dias_resultados.append({
            "Seguradora": seg,
            "Produto": prod,
            "MAE (15 dias)": round(mae_15dias, 2),
            "MAPE (15 dias)": round(mape_15dias, 2),
            "Total Real (R$)": round(total_real, 2),
            "Total Previsto (R$)": round(total_previsto, 2),
            "Interpreta√ß√£o da LLM": interpreta√ß√£o_llm_15dias,
            "Status": status
        })

    df_analise_15dias = pd.DataFrame(analise_15dias_resultados)

# === 3. Salvar An√°lise no Excel ==============================================
print("\nüìÑ Salvando aba 'Analise_15_Dias' no Excel‚Ä¶")

with pd.ExcelWriter(caminho_excel_previsao, engine="openpyxl", mode="a", if_sheet_exists="replace") as writer:
    df_analise_15dias.to_excel(writer, sheet_name="Analise_15_Dias", index=False)

# === FINAL ===================================================================
print("\n‚úÖ PROCESSAMENTO CONCLU√çDO: An√°lise dos 15 Dias")
print("üìÅ Excel atualizado:", caminho_excel_previsao)
print("‚è±Ô∏è Tempo total     : {:.2f}s".format(time.time() - data_inicio_exec))
print("="*60, "\n")